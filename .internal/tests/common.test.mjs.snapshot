exports[`common > should put files 1`] = `
[
  "internal-tests-output-common/.editorconfig",
  "internal-tests-output-common/.env",
  "internal-tests-output-common/.env.sample",
  "internal-tests-output-common/.env.test",
  "internal-tests-output-common/.github/actions/setup-db/action.yml",
  "internal-tests-output-common/.github/actions/setup-node/action.yml",
  "internal-tests-output-common/.github/copilot-instructions.md",
  "internal-tests-output-common/.github/workflows/ci.yml",
  "internal-tests-output-common/.github/workflows/migration.yml",
  "internal-tests-output-common/.gitignore",
  "internal-tests-output-common/.node-version",
  "internal-tests-output-common/.npmrc",
  "internal-tests-output-common/.vscode/extensions.json",
  "internal-tests-output-common/.vscode/settings.json",
  "internal-tests-output-common/Dockerfile",
  "internal-tests-output-common/README.md",
  "internal-tests-output-common/biome.json",
  "internal-tests-output-common/compose.yml",
  "internal-tests-output-common/lefthook.yml",
  "internal-tests-output-common/next.config.ts",
  "internal-tests-output-common/otel-collector-config.yml",
  "internal-tests-output-common/package.json",
  "internal-tests-output-common/playwright.config.ts",
  "internal-tests-output-common/pnpm-lock.yaml",
  "internal-tests-output-common/postcss.config.mjs",
  "internal-tests-output-common/prisma/ERD.md",
  "internal-tests-output-common/prisma/migrations/migration_lock.toml",
  "internal-tests-output-common/prisma/schema.prisma",
  "internal-tests-output-common/public/.gitkeep",
  "internal-tests-output-common/renovate.json",
  "internal-tests-output-common/tests/db.setup.ts",
  "internal-tests-output-common/tests/vitest.setup.ts",
  "internal-tests-output-common/tsconfig.json",
  "internal-tests-output-common/vitest.config.ts",
  "mocked/migration.sql"
]
`;

exports[`common > should update .github/workflows/ci.yml 1`] = `
[
  "name: ci",
  "",
  "on:",
  "  pull_request:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - .github/workflows/ci.yml",
  "      - Dockerfile",
  "  push:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - .github/workflows/ci.yml",
  "      - Dockerfile",
  "",
  "jobs:",
  "  lint:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm lint",
  "      - run: npx biome check . && npx prettier --check './**/*.{md,yml}'",
  "  build:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: pnpm build",
  "  build-docker:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      # should store them to github.secrets",
  "      POSTGRES_URL: postgresql://dev:1234@172.17.0.1:5432/dev?schema=public",
  "      NEXTAUTH_SECRET: UfxvOS6HetHOFkL44YTITYgc0DOuOlz5TBp3jkbnZ3w=",
  "      NEXT_PUBLIC_SITE_URL: http://localhost:3000",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: |",
  "          docker build \\\\",
  "            -t app \\\\",
  "            -f Dockerfile \\\\",
  "            --build-arg POSTGRES_URL=\${{env.POSTGRES_URL}} \\\\",
  "            --build-arg NEXTAUTH_SECRET=\${{env.NEXTAUTH_SECRET}} \\\\",
  "            --build-arg NEXT_PUBLIC_SITE_URL=\${{env.NEXT_PUBLIC_SITE_URL}} \\\\",
  "            .",
  "      - run: docker run -d -p 3000:3000 app",
  "      - run: |",
  "          until $(curl --output /dev/null --silent --fail \${{env.NEXT_PUBLIC_SITE_URL}}); do",
  "            printf '!'",
  "            sleep 1",
  "          done",
  "        timeout-minutes: 1",
  "  unit-test:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "        with:",
  "          run_db: false",
  "      - run: pnpm test",
  "  e2e-test:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      NEXTAUTH_SECRET: UfxvOS6HetHOFkL44YTITYgc0DOuOlz5TBp3jkbnZ3w=",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "        with:",
  "          run_db: false",
  "      - run: pnpm exec playwright install chromium",
  "      - run: pnpm build:test",
  "      - run: pnpm test:e2e",
  ""
]
`;

exports[`common > should update .gitignore 1`] = `
[
  ".githooks",
  "",
  "node_modules",
  "coverage",
  "",
  "/.next/",
  "",
  ".auth",
  "playwright-report",
  "test-results",
  "",
  ".DS_Store",
  "*.pem",
  "",
  ".env",
  "",
  ".vercel",
  "",
  "*.tsbuildinfo",
  "next-env.d.ts",
  "",
  ""
]
`;

exports[`common > should update README.md 1`] = `
[
  "## Setup",
  "",
  "\`\`\`sh",
  "# enable git hooks and corepack",
  "$ npm run setup",
  "# install deps",
  "$ pnpm i",
  "# create \\".env\\" and modifying environment variables",
  "$ cp .env.sample .env",
  "\`\`\`",
  "",
  "## Development",
  "",
  "\`\`\`sh",
  "$ pnpm dev",
  "\`\`\`",
  "",
  "## Production",
  "",
  "\`\`\`sh",
  "$ pnpm db:up",
  "$ pnpm build",
  "$ pnpm start",
  "\`\`\`",
  "",
  "### Observability",
  "",
  "This template uses Jaeger as a tracing platform. The local environment doesn't require \`TRACE_EXPORTER_URL\` environment value.",
  "",
  "\`\`\`sh",
  "# open Jaeger",
  "$ open http://localhost:16686/",
  "\`\`\`",
  "",
  "## Test",
  "",
  "### Unit Test",
  "",
  "\`\`\`sh",
  "$ pnpm test",
  "$ pnpm test:watch",
  "\`\`\`",
  "",
  "### E2E Test",
  "",
  "A build task must be executed before running tests to bypass JWT logic.",
  "",
  "\`\`\`sh",
  "# install chrome",
  "$ pnpm exec playwright install chrome",
  "# build using test environments since it needs to change encode/decode functions of next-auth",
  "$ pnpm build:test",
  "",
  "$ pnpm test:e2e",
  "# execute with UI",
  "$ pnpm test:e2e:ui",
  "\`\`\`",
  "",
  "## Database",
  "",
  "\`\`\`sh",
  "# create new migration",
  "$ pnpm db:migrate",
  "# reset the DB",
  "$ pnpm db:reset",
  "# view the database items",
  "$ pnpm db:studio",
  "\`\`\`",
  "",
  "## Links",
  "",
  "- [Database ER diagram](/prisma/ERD.md)",
  ""
]
`;

exports[`common > should update compose.yml 1`] = `
[
  "volumes:",
  "  db-data:",
  "",
  "services:",
  "  db:",
  "    image: postgres:17",
  "    ports:",
  "      - \${POSTGRES_PORT:-5432}:5432",
  "    environment:",
  "      - POSTGRES_USER=\${POSTGRES_USER}",
  "      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}",
  "      - POSTGRES_DB=\${POSTGRES_DB}",
  "  jaeger:",
  "    image: jaegertracing/all-in-one",
  "    ports:",
  "      # https://www.jaegertracing.io/docs/1.6/getting-started/#all-in-one-docker-image",
  "      # frontend",
  "      - 16686:16686",
  "      - 14268",
  "      - 14250",
  "    environment:",
  "      - METRICS_STORAGE_TYPE=prometheus",
  "      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true",
  "      - COLLECTOR_OTLP_ENABLED=true",
  "  # don't use contrib on prod",
  "  # https://opentelemetry.io/blog/2024/otel-collector-anti-patterns/#3--not-using-the-right-collector-distribution-or-not-building-your-own-distribution",
  "  otel-collector:",
  "    image: otel/opentelemetry-collector-contrib",
  "    command: [\\"--config=/conf/otel-collector-config.yml\\"]",
  "    volumes:",
  "      - ./otel-collector-config.yml:/conf/otel-collector-config.yml",
  "    ports:",
  "      - 13133:13133 # health_check extension",
  "      - 4317:4317 # OTLP gRPC receiver",
  "    depends_on:",
  "      - jaeger",
  ""
]
`;

exports[`common > should update dependencies 1`] = `
{
  "dependencies": [
    "@auth/prisma-adapter",
    "@hookform/resolvers",
    "@opentelemetry/exporter-metrics-otlp-grpc",
    "@opentelemetry/exporter-trace-otlp-grpc",
    "@opentelemetry/exporter-trace-otlp-proto",
    "@opentelemetry/instrumentation-http",
    "@opentelemetry/resources",
    "@opentelemetry/sdk-metrics",
    "@opentelemetry/sdk-node",
    "@opentelemetry/sdk-trace-base",
    "@opentelemetry/semantic-conventions",
    "@prisma/client",
    "@prisma/instrumentation",
    "clsx",
    "next",
    "next-auth",
    "react",
    "react-dom",
    "react-hook-form",
    "zod"
  ],
  "devDependencies": [
    "@biomejs/biome",
    "@playwright/test",
    "@tailwindcss/postcss",
    "@testing-library/react",
    "@types/node",
    "@types/react",
    "@types/react-dom",
    "@vitejs/plugin-react",
    "dotenv",
    "dotenv-cli",
    "jsdom",
    "lefthook",
    "postcss",
    "prettier",
    "prisma",
    "prisma-erd-generator",
    "tailwindcss",
    "testcontainers",
    "typescript",
    "vitest"
  ]
}
`;

exports[`common > should update next.config.ts 1`] = `
[
  "import type { NextConfig } from \\"next\\";",
  "",
  "const nextConfig: NextConfig = {",
  "  images: {",
  "    remotePatterns: [",
  "      {",
  "        protocol: \\"https\\",",
  "        hostname: \\"lh3.googleusercontent.com\\",",
  "      },",
  "    ],",
  "  },",
  "  experimental: {",
  "    authInterrupts: true,",
  "  },",
  "  webpack: (config, { isServer }) => {",
  "    if (isServer) {",
  "      // https://github.com/open-telemetry/opentelemetry-js/issues/4173",
  "      config.ignoreWarnings = [{ module: /opentelemetry/ }];",
  "    }",
  "    return config;",
  "  },",
  "};",
  "",
  "export default nextConfig;",
  ""
]
`;
