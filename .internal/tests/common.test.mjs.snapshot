exports[`common > should put files 1`] = `
[
  "internal-tests-output-common/.editorconfig",
  "internal-tests-output-common/.env",
  "internal-tests-output-common/.env.sample",
  "internal-tests-output-common/.env.test",
  "internal-tests-output-common/.githooks/pre-commit",
  "internal-tests-output-common/.github/actions/setup-db/action.yml",
  "internal-tests-output-common/.github/actions/setup-node/action.yml",
  "internal-tests-output-common/.github/actions/setup-prisma/action.yml",
  "internal-tests-output-common/.github/workflows/ci.yml",
  "internal-tests-output-common/.github/workflows/migration.yml",
  "internal-tests-output-common/.gitignore",
  "internal-tests-output-common/.node-version",
  "internal-tests-output-common/.npmrc",
  "internal-tests-output-common/.vscode/extensions.json",
  "internal-tests-output-common/.vscode/settings.json",
  "internal-tests-output-common/Dockerfile",
  "internal-tests-output-common/README.md",
  "internal-tests-output-common/biome.json",
  "internal-tests-output-common/compose.yml",
  "internal-tests-output-common/dbSetup.test.ts",
  "internal-tests-output-common/lint-staged.config.mjs",
  "internal-tests-output-common/next.config.ts",
  "internal-tests-output-common/otel-collector-config.yml",
  "internal-tests-output-common/package.json",
  "internal-tests-output-common/playwright.config.ts",
  "internal-tests-output-common/pnpm-lock.yaml",
  "internal-tests-output-common/postcss.config.cjs",
  "internal-tests-output-common/prisma/ERD.md",
  "internal-tests-output-common/prisma/migrations/migration_lock.toml",
  "internal-tests-output-common/prisma/schema.prisma",
  "internal-tests-output-common/public/.gitkeep",
  "internal-tests-output-common/renovate.json",
  "internal-tests-output-common/tailwind.config.ts",
  "internal-tests-output-common/tsconfig.json",
  "internal-tests-output-common/vitest.config.ts",
  "internal-tests-output-common/vitest.setup.ts",
  "mocked/migration.sql"
]
`;

exports[`common > should update .github/workflows/ci.yml 1`] = `
[
  "name: ci",
  "",
  "on:",
  "  pull_request:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - .github/workflows/ci.yml",
  "      - Dockerfile",
  "  push:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - .github/workflows/ci.yml",
  "      - Dockerfile",
  "",
  "jobs:",
  "  lint:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm lint",
  "      - run: npx biome check . && npx prettier --check './**/*.{md,yml}'",
  "  build:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: pnpm build",
  "  build-docker:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      # should store them to github.secrets",
  "      POSTGRES_URL: postgresql://dev:1234@172.17.0.1:5432/dev?schema=public",
  "      NEXTAUTH_SECRET: UfxvOS6HetHOFkL44YTITYgc0DOuOlz5TBp3jkbnZ3w=",
  "      NEXT_PUBLIC_SITE_URL: http://localhost:3000",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: |",
  "          docker build \\\\",
  "            -t app \\\\",
  "            -f Dockerfile \\\\",
  "            --build-arg POSTGRES_URL=\${{env.POSTGRES_URL}} \\\\",
  "            --build-arg NEXTAUTH_SECRET=\${{env.NEXTAUTH_SECRET}} \\\\",
  "            --build-arg NEXT_PUBLIC_SITE_URL=\${{env.NEXT_PUBLIC_SITE_URL}} \\\\",
  "            .",
  "      - run: docker run -d -p 3000:3000 app",
  "      - run: |",
  "          until $(curl --output /dev/null --silent --fail \${{env.NEXT_PUBLIC_SITE_URL}}); do",
  "            printf '!'",
  "            sleep 1",
  "          done",
  "        timeout-minutes: 1",
  "  unit-test:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-prisma",
  "      - run: pnpm test",
  "  e2e-test:",
  "    needs: [build]",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      NEXTAUTH_SECRET: UfxvOS6HetHOFkL44YTITYgc0DOuOlz5TBp3jkbnZ3w=",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-prisma",
  "      - run: pnpm exec playwright install chromium",
  "      - run: pnpm build:test",
  "      - run: pnpm test:e2e",
  ""
]
`;

exports[`common > should update .gitignore 1`] = `
[
  "/node_modules",
  "/coverage",
  "",
  "/.next/",
  "",
  "/build",
  "",
  "playwright-report",
  "",
  ".DS_Store",
  "*.pem",
  "",
  ".env",
  ".env*.local",
  "",
  ".vercel",
  "",
  "*.tsbuildinfo",
  "next-env.d.ts",
  "",
  "storageState.json",
  "",
  "test-results",
  "",
  ""
]
`;

exports[`common > should update README.md 1`] = `
[
  "## Setup",
  "",
  "**1. Installing Docker Compose**",
  "",
  "Please check [Installation scenarios](https://docs.docker.com/compose/install/) section.",
  "",
  "**2. Enabling git hook and corepack**",
  "",
  "\`\`\`sh",
  "npm run setup",
  "\`\`\`",
  "",
  "**3. Installing Deps**",
  "",
  "\`\`\`sh",
  "pnpm i",
  "\`\`\`",
  "",
  "**4. Creating \`.env\` and modifying environment variables**",
  "",
  "\`\`\`sh",
  "cp .env.sample .env",
  "\`\`\`",
  "",
  "Set the following environment variables in \`.env\`.",
  "",
  "\`\`\`",
  "GOOGLE_CLIENT_ID=",
  "GOOGLE_CLIENT_SECRET=",
  "\`\`\`",
  "",
  "_If you don't use Google OAuth, you can remove a provider from \`_clients/NextAuth.ts\`._",
  "",
  "## Dev",
  "",
  "\`\`\`sh",
  "# start docker compose, migrations(generating the client), and next dev",
  "pnpm dev",
  "# create new migration",
  "pnpm db:migrate",
  "# reset the DB",
  "pnpm db:reset",
  "# view the contents",
  "pnpm db:studio",
  "\`\`\`",
  "",
  "üìô [Database ER diagram](/prisma/ERD.md)",
  "",
  "## Test",
  "",
  "Test uses also DB so need to start DB first.",
  "",
  "\`\`\`sh",
  "# unit test",
  "# execute",
  "pnpm test",
  "# watch the unit test",
  "pnpm test:watch",
  "",
  "# e2e",
  "# install chrome",
  "pnpm exec playwright install chrome",
  "# test uses a built app since next.js has different cache behavior between development and production",
  "pnpm build",
  "# execute",
  "pnpm test:e2e",
  "\`\`\`",
  "",
  "üíÅ‚Äç‚ôÄÔ∏è This template recommends using a real database but when you face not keeping idempotency, you might consider using mock.",
  "",
  "## Prod",
  "",
  "\`\`\`sh",
  "pnpm db:start",
  "pnpm build",
  "pnpm start",
  "\`\`\`",
  "",
  "If you set \`POSTGRESQL_URL\` as GitHub secrets, you will be able to execute migration for database on GitHub actions(\`.github/workflows/migration.yml\`).",
  "",
  "## Observability",
  "",
  "This project has [OpenTelemetry](https://opentelemetry.io/) and it works only production environment.",
  "",
  "### Local",
  "",
  "\`\`\`sh",
  "pnpm db:start",
  "pnpm build",
  "pnpm start",
  "# open Jaeger",
  "open http://localhost:16686/",
  "\`\`\`",
  "",
  "### Server",
  "",
  "Please add a url to \`process.env.TRACE_EXPORTER_URL\`.",
  ""
]
`;
