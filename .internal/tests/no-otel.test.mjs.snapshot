exports[`no-otel > should put files 1`] = `
[
  "internal-tests-output-no-otel/.editorconfig",
  "internal-tests-output-no-otel/.env",
  "internal-tests-output-no-otel/.env.sample",
  "internal-tests-output-no-otel/.env.test",
  "internal-tests-output-no-otel/.github/actions/setup-db/action.yml",
  "internal-tests-output-no-otel/.github/actions/setup-node/action.yml",
  "internal-tests-output-no-otel/.github/copilot-instructions.md",
  "internal-tests-output-no-otel/.github/workflows/ci.yml",
  "internal-tests-output-no-otel/.github/workflows/migration.yml",
  "internal-tests-output-no-otel/.gitignore",
  "internal-tests-output-no-otel/.node-version",
  "internal-tests-output-no-otel/.npmrc",
  "internal-tests-output-no-otel/.vscode/extensions.json",
  "internal-tests-output-no-otel/.vscode/settings.json",
  "internal-tests-output-no-otel/Dockerfile",
  "internal-tests-output-no-otel/README.md",
  "internal-tests-output-no-otel/biome.json",
  "internal-tests-output-no-otel/compose.yml",
  "internal-tests-output-no-otel/env.ts",
  "internal-tests-output-no-otel/knip.config.ts",
  "internal-tests-output-no-otel/lefthook.yml",
  "internal-tests-output-no-otel/next.config.ts",
  "internal-tests-output-no-otel/package.json",
  "internal-tests-output-no-otel/playwright.config.ts",
  "internal-tests-output-no-otel/pnpm-lock.yaml",
  "internal-tests-output-no-otel/postcss.config.mjs",
  "internal-tests-output-no-otel/prisma/ERD.md",
  "internal-tests-output-no-otel/prisma/migrations/migration_lock.toml",
  "internal-tests-output-no-otel/prisma/schema.prisma",
  "internal-tests-output-no-otel/public/.gitkeep",
  "internal-tests-output-no-otel/renovate.json",
  "internal-tests-output-no-otel/tests/build.mjs",
  "internal-tests-output-no-otel/tests/db.setup.ts",
  "internal-tests-output-no-otel/tests/vitest.helper.ts",
  "internal-tests-output-no-otel/tests/vitest.setup.ts",
  "internal-tests-output-no-otel/tsconfig.json",
  "internal-tests-output-no-otel/vitest.config.ts",
  "mocked/migration.sql"
]
`;

exports[`no-otel > should update .env.sample 1`] = `
[
  "# Next.js",
  "NEXT_PUBLIC_SITE_URL=http://localhost:3000",
  "",
  "# Database",
  "DATABASE_USER=local",
  "DATABASE_PASSWORD=1234",
  "DATABASE_DB=database",
  "DATABASE_HOST=localhost",
  "DATABASE_PORT=5432",
  "DATABASE_SCHEMA=public",
  "# for prisma migration, not used in development, test and production",
  "DATABASE_URL=postgresql://\${DATABASE_USER}:\${DATABASE_PASSWORD}@\${DATABASE_HOST}:\${DATABASE_PORT}/\${DATABASE_DB}?schema=\${DATABASE_SCHEMA}",
  "",
  "# Google OAuth",
  "# https://console.cloud.google.com/apis/credentials",
  "# Set values below",
  "# AUTHORIZED JAVASCRIPT ORIGINS: http://localhost:3000",
  "# AUTHORIZED REDIRECT URIS: http://localhost:3000/api/auth/callback/google",
  "GOOGLE_CLIENT_ID=xxxx",
  "GOOGLE_CLIENT_SECRET=xxxx",
  "",
  "# NextAuth.js",
  "NEXTAUTH_URL=\${NEXT_PUBLIC_SITE_URL}",
  "# https://next-auth.js.org/configuration/options#secret",
  "# you must generate a new secret",
  "# error: \\"ikm\\" must be at least one byte in length'",
  "# $ openssl rand -base64 32",
  "NEXTAUTH_SECRET=TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "",
  "",
  "# Stripe",
  "STRIPE_SECRET_KEY=xxxx",
  "STRIPE_WEBHOOK_SECRET=xxxx",
  "STRIPE_PRICE_ID=xxxx",
  ""
]
`;

exports[`no-otel > should update .env.test 1`] = `
[
  "# Next.js",
  "NEXT_PUBLIC_SITE_URL=http://localhost:3000",
  "",
  "# Database",
  "DATABASE_USER=local",
  "DATABASE_PASSWORD=1234",
  "DATABASE_DB=database",
  "DATABASE_HOST=localhost",
  "DATABASE_PORT=5432",
  "DATABASE_SCHEMA=public",
  "# for prisma migration, not used in development, test and production",
  "DATABASE_URL=postgresql://\${DATABASE_USER}:\${DATABASE_PASSWORD}@\${DATABASE_HOST}:\${DATABASE_PORT}/\${DATABASE_DB}?schema=\${DATABASE_SCHEMA}",
  "",
  "# Google OAuth",
  "# https://console.cloud.google.com/apis/credentials",
  "# Set values below",
  "# AUTHORIZED JAVASCRIPT ORIGINS: http://localhost:3000",
  "# AUTHORIZED REDIRECT URIS: http://localhost:3000/api/auth/callback/google",
  "GOOGLE_CLIENT_ID=dummy",
  "GOOGLE_CLIENT_SECRET=dummy",
  "",
  "# NextAuth.js",
  "NEXTAUTH_URL=\${NEXT_PUBLIC_SITE_URL}",
  "# https://next-auth.js.org/configuration/options#secret",
  "# you must generate a new secret",
  "# error: \\"ikm\\" must be at least one byte in length'",
  "# $ openssl rand -base64 32",
  "NEXTAUTH_SECRET=TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "NEXTAUTH_TEST_MODE=true",
  "",
  "",
  "# Stripe",
  "STRIPE_SECRET_KEY=dummy",
  "STRIPE_WEBHOOK_SECRET=dummy",
  "STRIPE_PRICE_ID=dummy",
  ""
]
`;

exports[`no-otel > should update Dockerfile 1`] = `
[
  "FROM node:22.13.1-slim AS base",
  "",
  "WORKDIR /app",
  "",
  "ARG DATABASE_URL=''",
  "ARG DATABASE_HOST=''",
  "ARG NEXTAUTH_SECRET=''",
  "ARG NEXT_PUBLIC_SITE_URL=''",
  "",
  "ENV PNPM_HOME=\\"/pnpm\\"",
  "ENV PATH=\\"$PNPM_HOME:$PATH\\"",
  "ENV DATABASE_HOST=$DATABASE_HOST",
  "ENV DATABASE_URL=$DATABASE_URL",
  "ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET",
  "ENV NEXTAUTH_URL=$NEXT_PUBLIC_SITE_URL",
  "ENV NEXT_PUBLIC_SITE_URL=$NEXT_PUBLIC_SITE_URL",
  "",
  "RUN npm install -g corepack",
  "RUN corepack enable",
  "RUN apt-get update -y && apt-get install -y openssl",
  "",
  "COPY . /app",
  "",
  "FROM base AS prod-deps",
  "",
  "RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm i --prod --frozen-lockfile",
  "RUN pnpm generate:client --generator client",
  "",
  "FROM base AS build",
  "",
  "RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm i --frozen-lockfile",
  "RUN pnpm build",
  "",
  "FROM base AS app",
  "",
  "COPY --from=build /app/.next /app/.next",
  "COPY --from=prod-deps /app/node_modules /app/node_modules",
  "",
  "EXPOSE 3000",
  "CMD [\\"pnpm\\", \\"start\\"]",
  ""
]
`;

exports[`no-otel > should update README.md 1`] = `
[
  "## Setup",
  "",
  "\`\`\`sh",
  "# enable corepack",
  "$ npm run setup",
  "# install deps",
  "$ pnpm i",
  "# create \\".env\\" and modifying environment variables",
  "$ cp .env.sample .env",
  "\`\`\`",
  "",
  "## Development",
  "",
  "\`\`\`sh",
  "$ pnpm dev",
  "\`\`\`",
  "",
  "### Debugging Stripe",
  "",
  "1. Create a subscription [here](https://dashboard.stripe.com/test/products?active=true&create=product&source=product_list) and get \`price_id\`.",
  "",
  "2. Modify the environment variables. The test API key is [here](https://dashboard.stripe.com/test/apikeys).",
  "",
  "\`\`\`",
  "STRIPE_SECRET_KEY=",
  "STRIPE_WEBHOOK_SECRET=",
  "STRIPE_PRICE_ID=",
  "\`\`\`",
  "",
  "3. [Install stripe CLI](https://docs.stripe.com/stripe-cli) to bypass the webhook.",
  "",
  "4. Execute the following command in another terminal.",
  "",
  "\`\`\`sh",
  "$ stripe listen --forward-to localhost:3000/api/payment/webhook",
  "\`\`\`",
  "",
  "5. After signing in, you can go to the \`http://localhost:3000/me/payment\` page to see how to make a payment.",
  "",
  "## Production",
  "",
  "\`\`\`sh",
  "$ pnpm db:up",
  "$ pnpm build",
  "$ pnpm start",
  "\`\`\`",
  "",
  "## Test",
  "",
  "### Unit Test",
  "",
  "\`\`\`sh",
  "$ pnpm test",
  "$ pnpm test:watch",
  "\`\`\`",
  "",
  "### E2E Test",
  "",
  "A build task must be executed before running tests to bypass JWT logic.",
  "",
  "\`\`\`sh",
  "# install chrome",
  "$ pnpm exec playwright install chrome",
  "# build using test environments since it needs to change encode/decode functions of next-auth",
  "$ pnpm build:test",
  "",
  "$ pnpm test:e2e",
  "$ pnpm test:e2e:ui",
  "\`\`\`",
  "",
  "## Database",
  "",
  "\`\`\`sh",
  "$ pnpm db:migrate",
  "$ pnpm db:reset",
  "# view the database items",
  "$ pnpm db:studio",
  "\`\`\`",
  "",
  "## Links",
  "",
  "- [Database ER diagram](/prisma/ERD.md)",
  "- [Web App Template](https://hiroppy.github.io/web-app-template/)",
  ""
]
`;

exports[`no-otel > should update compose.yml 1`] = `
[
  "volumes:",
  "  db-data:",
  "",
  "services:",
  "  db:",
  "    image: postgres:17",
  "    ports:",
  "      - \${DATABASE_PORT:-5432}:5432",
  "    environment:",
  "      - POSTGRES_USER=\${DATABASE_USER}",
  "      - POSTGRES_PASSWORD=\${DATABASE_PASSWORD}",
  "      - POSTGRES_DB=\${DATABASE_DB}",
  ""
]
`;

exports[`no-otel > should update dependencies 1`] = `
{
  "dependencies": [
    "@auth/prisma-adapter",
    "@hookform/resolvers",
    "@prisma/client",
    "clsx",
    "next",
    "next-auth",
    "react",
    "react-dom",
    "react-hook-form",
    "stripe",
    "zod"
  ],
  "devDependencies": [
    "@biomejs/biome",
    "@next/env",
    "@playwright/test",
    "@tailwindcss/postcss",
    "@testing-library/react",
    "@types/node",
    "@types/react",
    "@types/react-dom",
    "@vitejs/plugin-react",
    "jsdom",
    "knip",
    "lefthook",
    "postcss",
    "prettier",
    "prisma",
    "prisma-erd-generator",
    "tailwindcss",
    "testcontainers",
    "typescript",
    "vitest"
  ]
}
`;

exports[`no-otel > should update env.ts 1`] = `
[
  "import { loadEnvConfig } from \\"@next/env\\";",
  "import { z } from \\"zod\\";",
  "",
  "export type Schema = z.infer<typeof schema>;",
  "",
  "const schema = z.object({",
  "  NODE_ENV: z",
  "    .union([",
  "      z.literal(\\"development\\"),",
  "      z.literal(\\"test\\"),",
  "      z.literal(\\"production\\"),",
  "    ])",
  "    .default(\\"development\\"),",
  "",
  "  // for client and server",
  "  NEXT_PUBLIC_SITE_URL: z.string().url(),",
  "",
  "  // for server",
  "  DATABASE_USER: z.string().min(1),",
  "  DATABASE_PASSWORD: z.string().min(1),",
  "  DATABASE_DB: z.string().min(1),",
  "  DATABASE_HOST: z.string().min(1),",
  "  DATABASE_PORT: z.coerce.number().min(1),",
  "  DATABASE_SCHEMA: z.string().min(1),",
  "",
  "  GOOGLE_CLIENT_ID: z.string().min(1),",
  "  GOOGLE_CLIENT_SECRET: z.string().min(1),",
  "",
  "  NEXTAUTH_URL: z.string().min(1),",
  "  NEXTAUTH_SECRET: z.string().min(1),",
  "",
  "  STRIPE_PRICE_ID: z.string().min(1),",
  "  STRIPE_SECRET_KEY: z.string().min(1),",
  "  STRIPE_WEBHOOK_SECRET: z.string().min(1),",
  "});",
  "",
  "export function config() {",
  "  const { combinedEnv } = loadEnvConfig(process.cwd());",
  "  const res = schema.safeParse(combinedEnv);",
  "",
  "  if (res.error) {",
  "    console.error(\\"\\\\x1b[31m%s\\\\x1b[0m\\", \\"[Errors] environment variables\\");",
  "    console.error(JSON.stringify(res.error.errors, null, 2));",
  "    process.exit(1);",
  "  }",
  "}",
  ""
]
`;

exports[`no-otel > should update next.config.ts 1`] = `
[
  "import type { NextConfig } from \\"next\\";",
  "import { config } from \\"./env\\";",
  "",
  "config();",
  "",
  "const nextConfig: NextConfig = {",
  "  async headers() {",
  "    return [",
  "      {",
  "        source: \\"/(.*?)\\",",
  "        headers: [",
  "          {",
  "            key: \\"X-Frame-Options\\",",
  "            value: \\"DENY\\",",
  "          },",
  "          {",
  "            key: \\"X-DNS-Prefetch-Control\\",",
  "            value: \\"on\\",",
  "          },",
  "          {",
  "            key: \\"X-XSS-Protection\\",",
  "            value: \\"1; mode=block\\",",
  "          },",
  "          {",
  "            key: \\"X-Content-Type-Options\\",",
  "            value: \\"nosniff\\",",
  "          },",
  "          {",
  "            key: \\"Referrer-Policy\\",",
  "            value: \\"origin-when-cross-origin\\",",
  "          },",
  "        ],",
  "      },",
  "    ];",
  "  },",
  "  images: {",
  "    remotePatterns: [",
  "      {",
  "        protocol: \\"https\\",",
  "        hostname: \\"lh3.googleusercontent.com\\",",
  "      },",
  "    ],",
  "  },",
  "  experimental: {",
  "    typedRoutes: true,",
  "    authInterrupts: true,",
  "  },",
  "};",
  "",
  "export default nextConfig;",
  ""
]
`;
