exports[`no-sample-code > should put files 1`] = `
[
  "internal-tests-output-no-sample-code/.editorconfig",
  "internal-tests-output-no-sample-code/.env",
  "internal-tests-output-no-sample-code/.env.sample",
  "internal-tests-output-no-sample-code/.env.test",
  "internal-tests-output-no-sample-code/.github/actions/setup-db/action.yml",
  "internal-tests-output-no-sample-code/.github/actions/setup-node/action.yml",
  "internal-tests-output-no-sample-code/.github/copilot-instructions.md",
  "internal-tests-output-no-sample-code/.github/workflows/ci.yml",
  "internal-tests-output-no-sample-code/.github/workflows/migration.yml",
  "internal-tests-output-no-sample-code/.gitignore",
  "internal-tests-output-no-sample-code/.node-version",
  "internal-tests-output-no-sample-code/.npmrc",
  "internal-tests-output-no-sample-code/.vscode/extensions.json",
  "internal-tests-output-no-sample-code/.vscode/settings.json",
  "internal-tests-output-no-sample-code/Dockerfile",
  "internal-tests-output-no-sample-code/README.md",
  "internal-tests-output-no-sample-code/biome.json",
  "internal-tests-output-no-sample-code/compose.yml",
  "internal-tests-output-no-sample-code/e2e/dummyUsers.ts",
  "internal-tests-output-no-sample-code/e2e/fixtures.ts",
  "internal-tests-output-no-sample-code/e2e/globalSetup.ts",
  "internal-tests-output-no-sample-code/e2e/globalTeardown.ts",
  "internal-tests-output-no-sample-code/e2e/globals.d.ts",
  "internal-tests-output-no-sample-code/e2e/helpers/prisma.ts",
  "internal-tests-output-no-sample-code/e2e/helpers/reset.ts",
  "internal-tests-output-no-sample-code/e2e/helpers/users.ts",
  "internal-tests-output-no-sample-code/e2e/models/Base.ts",
  "internal-tests-output-no-sample-code/e2e/setup/auth.ts",
  "internal-tests-output-no-sample-code/env.ts",
  "internal-tests-output-no-sample-code/lefthook.yml",
  "internal-tests-output-no-sample-code/next.config.ts",
  "internal-tests-output-no-sample-code/otel-collector-config.yml",
  "internal-tests-output-no-sample-code/package.json",
  "internal-tests-output-no-sample-code/playwright.config.ts",
  "internal-tests-output-no-sample-code/pnpm-lock.yaml",
  "internal-tests-output-no-sample-code/postcss.config.mjs",
  "internal-tests-output-no-sample-code/prisma/migrations/migration_lock.toml",
  "internal-tests-output-no-sample-code/prisma/schema.prisma",
  "internal-tests-output-no-sample-code/public/.gitkeep",
  "internal-tests-output-no-sample-code/renovate.json",
  "internal-tests-output-no-sample-code/src/app/(private)/layout.tsx",
  "internal-tests-output-no-sample-code/src/app/(public)/layout.tsx",
  "internal-tests-output-no-sample-code/src/app/(public)/page.tsx",
  "internal-tests-output-no-sample-code/src/app/_actions/test.helper.ts",
  "internal-tests-output-no-sample-code/src/app/_actions/types.ts",
  "internal-tests-output-no-sample-code/src/app/_clients/nextAuth.ts",
  "internal-tests-output-no-sample-code/src/app/_clients/nextAuthConfig.ts",
  "internal-tests-output-no-sample-code/src/app/_clients/prisma.ts",
  "internal-tests-output-no-sample-code/src/app/_components/Button.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Container.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Footer.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Header.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/SignInButton.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/SignOutButton.tsx",
  "internal-tests-output-no-sample-code/src/app/_providers/AuthProvider.tsx",
  "internal-tests-output-no-sample-code/src/app/_utils/db.test.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/db.ts",
  "internal-tests-output-no-sample-code/src/app/api/auth/[...nextauth]/route.ts",
  "internal-tests-output-no-sample-code/src/app/api/health/route.ts",
  "internal-tests-output-no-sample-code/src/app/global-error.tsx",
  "internal-tests-output-no-sample-code/src/app/globals.css",
  "internal-tests-output-no-sample-code/src/app/globals.d.ts",
  "internal-tests-output-no-sample-code/src/app/layout.tsx",
  "internal-tests-output-no-sample-code/src/app/not-found.tsx",
  "internal-tests-output-no-sample-code/src/app/robots.txt",
  "internal-tests-output-no-sample-code/src/instrumentation.ts",
  "internal-tests-output-no-sample-code/src/otel/node.ts",
  "internal-tests-output-no-sample-code/tests/db.setup.ts",
  "internal-tests-output-no-sample-code/tests/vitest.setup.ts",
  "internal-tests-output-no-sample-code/tsconfig.json",
  "internal-tests-output-no-sample-code/vitest.config.ts",
  "mocked/migration.sql"
]
`;

exports[`no-sample-code > should update next.config.ts 1`] = `
[
  "import type { NextConfig } from \\"next\\";",
  "import { config } from \\"./env\\";",
  "",
  "config();",
  "",
  "const nextConfig: NextConfig = {",
  "  webpack: (config, { isServer }) => {",
  "    if (isServer) {",
  "      // https://github.com/open-telemetry/opentelemetry-js/issues/4173",
  "      config.ignoreWarnings = [{ module: /opentelemetry/ }];",
  "    }",
  "    return config;",
  "  },",
  "};",
  "",
  "export default nextConfig;",
  ""
]
`;

exports[`no-sample-code > should update prisma/schema.prisma 1`] = `
[
  "// https://pris.ly/d/prisma-schema",
  "",
  "datasource db {",
  "  provider = \\"postgresql\\"",
  "  url      = env(\\"DATABASE_URL\\")",
  "}",
  "",
  "generator client {",
  "  provider        = \\"prisma-client-js\\"",
  "  previewFeatures = [\\"fullTextSearchPostgres\\"]",
  "}",
  "",
  "generator erd {",
  "  provider                  = \\"prisma-erd-generator\\"",
  "  theme                     = \\"forest\\"",
  "  output                    = \\"ERD.md\\"",
  "  includeRelationFromFields = true",
  "}",
  "",
  "// https://authjs.dev/getting-started/adapters/prisma#schema",
  "model Account {",
  "  id                String   @id @default(cuid())",
  "  userId            String   @map(\\"user_id\\")",
  "  type              String",
  "  provider          String",
  "  providerAccountId String   @map(\\"provider_account_id\\")",
  "  refresh_token     String?  @db.Text",
  "  access_token      String?  @db.Text",
  "  expires_at        Int?",
  "  token_type        String?",
  "  scope             String?",
  "  id_token          String?  @db.Text",
  "  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)",
  "  createdAt         DateTime @default(now()) @map(\\"created_at\\")",
  "  updatedAt         DateTime @updatedAt @map(\\"updated_at\\")",
  "",
  "  @@unique([provider, providerAccountId])",
  "  @@map(\\"accounts\\")",
  "}",
  "",
  "model User {",
  "  id            String    @id @default(cuid())",
  "  name          String?",
  "  email         String?   @unique",
  "  emailVerified DateTime? @map(\\"email_verified\\")",
  "  image         String?",
  "  accounts      Account[]",
  "  createdAt     DateTime  @default(now()) @map(\\"created_at\\")",
  "  updatedAt     DateTime  @updatedAt @map(\\"updated_at\\")",
  "  // https://authjs.dev/guides/basics/role-based-access-control",
  "  role          String?",
  "",
  "  @@map(\\"users\\")",
  "}",
  ""
]
`;

exports[`no-sample-code > should update src/app/(public)/page.tsx 1`] = `
[
  "export default async function Page() {",
  "  return (",
  "    <div className=\\"flex items-center justify-center\\">",
  "      <h1 className=\\"text-2xl\\">Hello World ðŸ˜„</h1>",
  "    </div>",
  "  );",
  "}",
  ""
]
`;

exports[`no-sample-code > should update src/app/layout.tsx 1`] = `
[
  "import { clsx } from \\"clsx\\";",
  "import type { Metadata, Viewport } from \\"next\\";",
  "import { Inter } from \\"next/font/google\\";",
  "import type { PropsWithChildren } from \\"react\\";",
  "import \\"./globals.css\\";",
  "",
  "const inter = Inter({ subsets: [\\"latin\\"] });",
  "",
  "export const metadata: Metadata = {",
  "  metadataBase: new URL(process.env.NEXT_PUBLIC_SITE_URL),",
  "  title: \\"\\",",
  "  description: \\"\\",",
  "};",
  "",
  "export const viewport: Viewport = {",
  "  maximumScale: 1,",
  "};",
  "",
  "export default function Layout({ children }: PropsWithChildren) {",
  "  return (",
  "    <html lang=\\"en\\">",
  "      <body className={clsx(\\"bg-gray-800 text-gray-200\\", inter.className)}>",
  "        <main>{children}</main>",
  "      </body>",
  "    </html>",
  "  );",
  "}",
  ""
]
`;
